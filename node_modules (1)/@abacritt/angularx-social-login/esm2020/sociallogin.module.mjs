import { NgModule, Optional, SkipSelf } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SocialAuthService } from './socialauth.service';
import { GoogleSigninButtonDirective } from './directives/google-signin-button.directive';
import * as i0 from "@angular/core";
/**
 * The main module of angularx-social-login library.
 */
export class SocialLoginModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');
        }
    }
    static initialize(config) {
        return {
            ngModule: SocialLoginModule,
            providers: [
                SocialAuthService,
                {
                    provide: 'SocialAuthServiceConfig',
                    useValue: config
                }
            ]
        };
    }
}
SocialLoginModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: SocialLoginModule, deps: [{ token: SocialLoginModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });
SocialLoginModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: SocialLoginModule, declarations: [GoogleSigninButtonDirective], imports: [CommonModule], exports: [GoogleSigninButtonDirective] });
SocialLoginModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: SocialLoginModule, providers: [
        SocialAuthService
    ], imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: SocialLoginModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [GoogleSigninButtonDirective],
                    imports: [
                        CommonModule
                    ],
                    providers: [
                        SocialAuthService
                    ],
                    exports: [GoogleSigninButtonDirective]
                }]
        }], ctorParameters: function () { return [{ type: SocialLoginModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29jaWFsbG9naW4ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvbGliL3NyYy9zb2NpYWxsb2dpbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFFBQVEsRUFDUixRQUFRLEVBQ1IsUUFBUSxFQUVULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsaUJBQWlCLEVBQTJCLE1BQU0sc0JBQXNCLENBQUM7QUFDbEYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7O0FBRTFGOztHQUVHO0FBV0gsTUFBTSxPQUFPLGlCQUFpQjtJQWM1QixZQUFvQyxZQUErQjtRQUNqRSxJQUFJLFlBQVksRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUNiLHNFQUFzRSxDQUFDLENBQUM7U0FDM0U7SUFDSCxDQUFDO0lBbEJNLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBK0I7UUFDdEQsT0FBTztZQUNMLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsU0FBUyxFQUFFO2dCQUNULGlCQUFpQjtnQkFDakI7b0JBQ0UsT0FBTyxFQUFFLHlCQUF5QjtvQkFDbEMsUUFBUSxFQUFFLE1BQU07aUJBQ2pCO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7OEdBWlUsaUJBQWlCLGtCQWNzQixpQkFBaUI7K0dBZHhELGlCQUFpQixpQkFUYiwyQkFBMkIsYUFFeEMsWUFBWSxhQUtKLDJCQUEyQjsrR0FFMUIsaUJBQWlCLGFBTGpCO1FBQ1QsaUJBQWlCO0tBQ2xCLFlBSkMsWUFBWTsyRkFPSCxpQkFBaUI7a0JBVjdCLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsMkJBQTJCLENBQUM7b0JBQzNDLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3FCQUNiO29CQUNELFNBQVMsRUFBRTt3QkFDVCxpQkFBaUI7cUJBQ2xCO29CQUNELE9BQU8sRUFBRSxDQUFDLDJCQUEyQixDQUFDO2lCQUN2QzswREFlbUQsaUJBQWlCOzBCQUF0RCxRQUFROzswQkFBSSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBOZ01vZHVsZSxcclxuICBPcHRpb25hbCxcclxuICBTa2lwU2VsZixcclxuICBNb2R1bGVXaXRoUHJvdmlkZXJzXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBTb2NpYWxBdXRoU2VydmljZSwgU29jaWFsQXV0aFNlcnZpY2VDb25maWcgfSBmcm9tICcuL3NvY2lhbGF1dGguc2VydmljZSc7XHJcbmltcG9ydCB7IEdvb2dsZVNpZ25pbkJ1dHRvbkRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9nb29nbGUtc2lnbmluLWJ1dHRvbi5kaXJlY3RpdmUnO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBtYWluIG1vZHVsZSBvZiBhbmd1bGFyeC1zb2NpYWwtbG9naW4gbGlicmFyeS5cclxuICovXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbR29vZ2xlU2lnbmluQnV0dG9uRGlyZWN0aXZlXSxcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGVcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgU29jaWFsQXV0aFNlcnZpY2VcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtHb29nbGVTaWduaW5CdXR0b25EaXJlY3RpdmVdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTb2NpYWxMb2dpbk1vZHVsZSB7XHJcbiAgcHVibGljIHN0YXRpYyBpbml0aWFsaXplKGNvbmZpZzogU29jaWFsQXV0aFNlcnZpY2VDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFNvY2lhbExvZ2luTW9kdWxlPiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogU29jaWFsTG9naW5Nb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIFNvY2lhbEF1dGhTZXJ2aWNlLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6ICdTb2NpYWxBdXRoU2VydmljZUNvbmZpZycsXHJcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnXHJcbiAgICAgICAgfVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50TW9kdWxlOiBTb2NpYWxMb2dpbk1vZHVsZSkge1xyXG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgJ1NvY2lhbExvZ2luTW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgaXQgaW4gdGhlIEFwcE1vZHVsZSBvbmx5Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==